services:
  device-1:
    build:
      context: .
      dockerfile: Sim.Dockerfile
    container_name: telemetry-device-1
    environment:
      - API_URL=http://backend:8000/api/telemetry
      - DEVICE_ID=device-office-001
      - USER_ID=user-001
      - INTERVAL=60
    restart: unless-stopped
    networks:
      - telemetry-network
    depends_on:
      - backend

  # Device 2 - Server Room
  device-2:
    image: Sim.Dockerfile
    build:
      context: .
      dockerfile: Sim.Dockerfile
    container_name: telemetry-device-2
    environment:
      - API_URL=http://backend:8000/api/telemetry
      - DEVICE_ID=device-server-002
      - USER_ID=user-001
      - INTERVAL=60
    restart: unless-stopped
    networks:
      - telemetry-network
    depends_on:
      - backend

  # Device 3 - Remote Warehouse
  device-3:
    image: Sim.Dockerfile
    build:
      context: .
      dockerfile: Sim.Dockerfile
    container_name: telemetry-device-3
    environment:
      - API_URL=http://backend:8000/api/telemetry
      - DEVICE_ID=device-warehouse-003
      - USER_ID=user-002
      - INTERVAL=60
    restart: unless-stopped
    networks:
      - telemetry-network
    depends_on:
      - backend

  # Device 4 - IoT Sensor
  device-4:
    image: Sim.Dockerfile
    build:
      context: .
      dockerfile: Sim.Dockerfile
    container_name: telemetry-device-4
    environment:
      - API_URL=http://backend:8000/api/telemetry
      - DEVICE_ID=device-iot-004
      - USER_ID=user-002
      - INTERVAL=60
    restart: unless-stopped
    networks:
      - telemetry-network
    depends_on:
      - backend

  # Device 5 - Mobile Station
  device-5:
    image: Sim.Dockerfile
    build:
      context: .
      dockerfile: Sim.Dockerfile
    container_name: telemetry-device-5
    environment:
      - API_URL=http://backend:8000/api/telemetry
      - DEVICE_ID=device-mobile-005
      - USER_ID=user-003
      - INTERVAL=60
    restart: unless-stopped
    networks:
      - telemetry-network
    depends_on:
      - backend
  redis:
    image: redis:latest
    container_name: redis_database
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
  mongodb:
    image: mongodb/mongodb-community-server:latest
    container_name: mongo_database
    restart: always
    ports:
      - "27017:27017"
    env_file:
      - ".env"
    volumes:
      - mongo_volume:/data/db

  api:
    build: .
    ports:
      - "8000:8000"
    restart: "on-failure"
    env_file:
      - ".env"
    environment:
      MONGODB_HOST: "mongodb"
      REDIS_HOST: "redis"
    develop:
      watch:
        - action: sync
          path: .
          target: /api

volumes:
  redis_data:
  mongo_volume:
